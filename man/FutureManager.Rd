% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R
\name{FutureManager}
\alias{FutureManager}
\title{Background calculations in shiny apps}
\description{
Background calculations in shiny apps

Background calculations in shiny apps
}
\details{
Manages the background processes and also keeps the state.
FutureManager is designed to work with fmRunButton. See demo() for details

See demo app (both) for some complete examples:
\itemize{
  \item{With run button:}{ \code{\link{demo}} }
  \item{Without run button:}{ \code{\link{demo_noButton}} }
}


Note that the long function must be able to detect the cancel. See 
fmIsInterrupted() for details
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FutureManager-new}{\code{FutureManager$new()}}
\item \href{#method-FutureManager-showProgress}{\code{FutureManager$showProgress()}}
\item \href{#method-FutureManager-run}{\code{FutureManager$run()}}
\item \href{#method-FutureManager-cancel}{\code{FutureManager$cancel()}}
\item \href{#method-FutureManager-initButtonState}{\code{FutureManager$initButtonState()}}
\item \href{#method-FutureManager-getButtonState}{\code{FutureManager$getButtonState()}}
\item \href{#method-FutureManager-updateButtonState}{\code{FutureManager$updateButtonState()}}
\item \href{#method-FutureManager-outdateRun}{\code{FutureManager$outdateRun()}}
\item \href{#method-FutureManager-outdateRuns}{\code{FutureManager$outdateRuns()}}
\item \href{#method-FutureManager-registerRunObserver}{\code{FutureManager$registerRunObserver()}}
\item \href{#method-FutureManager-clone}{\code{FutureManager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-new"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-new}{}}}
\subsection{Method \code{new()}}{
Create a new manager object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$new(
  input,
  session = shiny::getDefaultReactiveDomain(),
  opts = c(),
  keepPreviousResults = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{shiny input object}

\item{\code{session}}{shiny session object}

\item{\code{opts}}{character, names of options that should be passed to every background process}

\item{\code{keepPreviousResults}}{logical, should keep the results from the previous run until the latest ones are available?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
MinimalProgress object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-showProgress"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-showProgress}{}}}
\subsection{Method \code{showProgress()}}{
Show progress bar for a specific task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$showProgress(
  taskId,
  label,
  statusVar,
  millis = 500,
  session = shiny::getDefaultReactiveDomain()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskId}}{character string, the task ID}

\item{\code{label}}{character string, the progress label}

\item{\code{statusVar}}{reactiveVal object that is linked with the process}

\item{\code{millis}}{integer, refreshing interval (in ms)}

\item{\code{session}}{shiny session object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-run"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-run}{}}}
\subsection{Method \code{run()}}{
Run background process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$run(
  taskId,
  fun,
  args,
  statusVar,
  opts = c(),
  finally = NULL,
  seed = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskId}}{character string, the task ID}

\item{\code{fun}}{the long running function, the function should accept at least 
1 argument "task"}

\item{\code{args}}{list of additional arguments passed to fun}

\item{\code{statusVar}}{reactiveVal object that is linked with the process}

\item{\code{opts}}{character, names of options that should be passed to the 
background process}

\item{\code{finally}}{NULL or function, that will be executed after the process 
finishes. Function should accept 1 argument, the process status (string)}

\item{\code{seed}}{passed to future::future}

\item{\code{...}}{arguments passed to future::future}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-cancel"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-cancel}{}}}
\subsection{Method \code{cancel()}}{
Cancel the background process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$cancel(taskId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskId}}{character string, the task ID}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-initButtonState"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-initButtonState}{}}}
\subsection{Method \code{initButtonState()}}{
Init button state if not initialized yet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$initButtonState(inputId, defaultValue = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{character string, the button ID}

\item{\code{defaultValue}}{logical, the default button value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
current button state
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-getButtonState"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-getButtonState}{}}}
\subsection{Method \code{getButtonState()}}{
Get button state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$getButtonState(inputId)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{character string, the button ID}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
current button state
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-updateButtonState"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-updateButtonState}{}}}
\subsection{Method \code{updateButtonState()}}{
Update button state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$updateButtonState(inputId, value, status)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{character string, the button ID}

\item{\code{value}}{logical, the button value}

\item{\code{status}}{character string, see bsButton for details}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
current button state
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-outdateRun"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-outdateRun}{}}}
\subsection{Method \code{outdateRun()}}{
Outdate (invalidate) the process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$outdateRun(inputId, immediate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{character string, the button ID}

\item{\code{immediate}}{logical, should push the message to the frontend?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-outdateRuns"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-outdateRuns}{}}}
\subsection{Method \code{outdateRuns()}}{
Outdate (invalidate) all processes
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$outdateRuns(immediate = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{immediate}}{logical, should push the message to the frontend?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-registerRunObserver"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-registerRunObserver}{}}}
\subsection{Method \code{registerRunObserver()}}{
Register run observer
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$registerRunObserver(
  inputId,
  label,
  statusVar,
  longFun,
  Args,
  opts = c(),
  progress = TRUE,
  input = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputId}}{character string, the button ID}

\item{\code{label}}{character string, the progress bar label (used only if progress = TRUE)}

\item{\code{statusVar}}{reactiveVal object that is linked with the process}

\item{\code{longFun}}{long running function, see run() method for details}

\item{\code{Args}}{reactive, that should return a named list of additional longFun 
arguments}

\item{\code{opts}}{character vector, additional options that should be passed to 
the background process (apart of the opts specified in initialize())}

\item{\code{progress}}{logical, should progress bar be displayed?}

\item{\code{input}}{shiny input object, overrides the input defined in initialize();
helpful in shiny modules}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FutureManager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FutureManager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FutureManager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
